export function calc2CoordOnLine({ x, y }, { A, B }) {
    let k = x ? x : y; // Известное значение (known value);
    let i = x ? 0 : 1; // Индекс известного значения;
    // !i - индекс неизвестного значения, знак + переводит булевое в числовое;
    let t = (k - A[i]) / (B[i] - A[i]);
    return (1 - t) * A[+!i] + t * B[+!i];
}

function _calcQuadraticEquation(a, b, c) {
    let result = [];
    let D = Math.pow(b, 2) - 4 * a * c; // Дискриминант.
    if (D === 0) {
        result.push((-b + Math.sqrt(D)) / (2 * a));
    }
    else if (D > 0) {
        result.push((-b + Math.sqrt(D)) / (2 * a));
        result.push((-b - Math.sqrt(D)) / (2 * a));
    }
    return result;
}

export function calc2CoordOn3PBeziers({ x, y }, { A, B, C }) {
    let k = x ? x : y; // Известное значение координат known value (x или y);
    let i = x ? 0 : 1; // Индекс известного значения координат (x или y);
    // !i - индекс неизвестного значения (далее знак + переводит булевое в числовое).
    // МЕТОДИКА РАСЧЕТА
    // Квадратичная формула кривой Безье имеет вид: K(t) = (1 - t)^2*A + 2t*(1 -t)*B + t^2*C,
    // где: K(t) - точка пересечения на кривой; t - неизвестная, имеющая пределы значений от 0 до 1;
    // A, B, C - точки построения кривой. Приводим фрмулу кривой Безье к
    // стандартному виду квадратного уравнения: a*x^2 + b*x + c = 0
    // Вместо K(t), A, B, C можно подставить значения координат только x или только y в зависимости
    // от того, какое значение координат мы знаем для точки K(t). Решаем получившееся уравнение.
    // Найдя t подставляем его в уравнение Безье, предварительно поменяв у него точки на соответствующие
    // их значения координат только x или только y в зависимсоти от того, какое значение
    // координат изначально было неизвестной у точки пересечения K(t), тем самым найдя его.

    // РЕШЕНИЕ
    let t = []; // Может иметь два значения если формула кривой Безье сведется к квадратному уравнению.

    // Находим a, b и c для:
    let a = (A[i] - 2 * B[i] + C[i]);
    let b = 2 * (B[i] - A[i]);
    let c = A[i] - k;

    if (a !== 0) {
        // Если проверка верна, то формула кривой Безье имеет вид K(t) = (1 - t)^2*A + 2t*(1 -t)*A + t^2*C
        // или K(t) = A + t^2*(C - A) => t^2 = (K(t) - A)/(C - A).
        if (A[i] === B[i] && B[i] !== C[i]) {
            t.push(Math.sqrt(-c / (C[i] - A[i])));
        }
        // Если проверка верна, то формула кривой Безье сводится к квадратному уравнению.
        else {
            t = _calcQuadraticEquation(a, b, c);
        }
    }
    // Если проверка верна, то то формула кривой Безье сводится к линейному уравнению вида b*x + c = 0.
    else if (b !== 0 || A[i] === B[i]) {
        t.push(-c / b);
    }
    // Фильтруем полученные значения t по условию нахождению в пределах от 0 до 1.
    t = t.filter(t => t >= 0 && t <= 1);
    // Находим неизвестное значениее координат для точки пересечения K(t) (если значения два, то точек пересечения две).
    // result = t.length > 0 ? t.map( t => Math.pow((1 - t), 2) * A[+!i] + 2 * t * (1 - t) * B[+!i] + Math.pow(t, 2) * C[+!i]) : null;
    // return result ? result.length > 1 ? result : result[0] : null;
    return t.map(t => Math.pow((1 - t), 2) * A[+!i] + 2 * t * (1 - t) * B[+!i] + Math.pow(t, 2) * C[+!i]);
}

// console.log(calc2CoordOn3PBeziers({ x: 6 }, { A: [1, 1], B: [4, 5], C: [7, 1] }));

export function calc2CoordOn4PBeziers({ x, y }, { A, B, C, D }) {
    let k = x ? x : y; // Известное значение координат known value (x или y);
    let i = x ? 0 : 1; // Индекс известного значения координат (x или y);
    // !i - индекс неизвестного значения (далее знак + переводит булевое в числовое).
    // МЕТОДИКА РАСЧЕТА
    // Кубическая формула кривой Безье имеет вид: K(t) = (1 - t)^3*A + 3t*(1 -t)^2*B + 3t^2*(1 - t)C + t^3*D,
    // где: K(t) - точка пересечения на кривой; t - неизвестная, имеющая пределы значений от 0 до 1;
    // A, B, C - точки построения кривой. Приводим фрмулу кривой Безье к
    // стандартному виду кубического уравнения: e*x^3 + a*x^2 + b*x + c = 0
    // Вместо K(t), A, B, C можно подставить значения координат только x или только y в зависимости
    // от того, какое значение координат мы знаем для точки K(t). Решаем получившееся уравнение.
    // Найдя t подставляем его в уравнение Безье, предварительно поменяв у него точки на соответствующие
    // их значения координат только x или только y в зависимсоти от того, какое значение
    // координат изначально было неизвестной у точки пересечения K(t), тем самым найдя его.

    // РЕШЕНИЕ
    let t = []; // Может иметь три значения если формула кривой Безье сведется к кубическому уравнению.

    let e = -A[i] + 3 * B[i] - 3 * C[i] + D[i];
    let a = 3 * A[i] - 6 * B[i] + 3 * C[i];
    let b = -3 * A[i] + 3 * B[i];
    let c = A[i] - k;

    if (e !== 0) {
        // Приводим кубическое уравнение к виду x^3 + a*x^2 + b*x + c = 0,
        // поделив его на первый коэфициент e, тогда новые значения коэфициентов равны:
        a = a / e;
        b = b / e;
        c = c / e;

        let Q = (Math.pow(a, 2) - 3 * b) / 9;
        let R = (2 * Math.pow(a, 3) - 9 * a * b + 27 * c) / 54;
        let S = Math.pow(Q, 3) - Math.pow(R, 2);

        if (S > 0) {
            let f = Math.acos(R / Math.pow(Q, 3 / 2)) / 3;

            t = [f, f + 2 * Math.PI / 3, f - 2 * Math.PI / 3].map(angle => -2 * Math.pow(Q, 1 / 2) * Math.cos(angle) - a / 3);
        }
        // Если проверка верна, то уравнение имеет меньше трех корней, которые считаются по формуле:
        // n*R^(1/3) - a/3, где n равен 1 и -2.
        else if (S === 0) {
            // Корень из отрицательного чилса методом Math.pow не берется, поэтому добавлнена проверка.
            t = [1, -2].map(n => n * (R < 0 ? -1 : 1) * Math.pow(Math.abs(R), 1 / 3) - a / 3);
        }
        else if (S < 0) {
            if (Q > 0) {
                let f = Math.acosh(Math.abs(R) / Math.pow(Q, 3 / 2)) / 3;
                t.push(-2 * Math.sign(R) * Math.sqrt(Q) * Math.cosh(f) - a / 3);
            }
            else if (Q < 0) {
                let f = Math.asinh(Math.abs(R) / Math.pow(Math.abs(Q), 3 / 2)) / 3;
                t.push(-2 * Math.sign(R) * Math.sqrt(Math.abs(Q)) * Math.sinh(f) - a / 3);
            }
            else if (Q === 0) {
                t.push(-Math.pow((c - Math.pow(a, 3) / 27), 1 / 3) - a / 3);
            }
        }
    }
    else {
        // Если проверка верна, то формула кривой Безье сводится к квадратному уравнению.
        if (a !== 0 && A[i] !== B[i]) {
            t = _calcQuadraticEquation(a, b, c);
        }
        // Если проверка верна, то то формула кривой Безье сводится к линейному уравнению вида b*x + c = 0.
        else if (A[i] !== B[i]) {
            t.push(-c / b);
        }
    }
    // Фильтруем полученные значения t по условию нахождению в пределах от 0 до 1.
    t = t.filter(t => t >= 0 && t <= 1);
    // Находим неизвестное значениее координат для точки пересечения K(t) (если значения два, то точек пересечения две).
    return t.map(t => Math.pow((1 - t), 3) * A[+!i] + 3 * t * Math.pow((1 - t), 2) * B[+!i] + 3 * Math.pow(t, 2) * (1 - t) * C[+!i] + Math.pow(t, 3) * D[+!i]);
}